<?php

namespace DoctrineProxies\__CG__\Omeka\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Job extends \Omeka\Entity\Job implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'pid', 'status', 'class', 'args', 'log', 'owner', 'step', 'totalSteps', 'started', 'ended'];
        }

        return ['__isInitialized__', 'id', 'pid', 'status', 'class', 'args', 'log', 'owner', 'step', 'totalSteps', 'started', 'ended'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Job $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setPid($pid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPid', [$pid]);

        return parent::setPid($pid);
    }

    /**
     * {@inheritDoc}
     */
    public function getPid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPid', []);

        return parent::getPid();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setClass($class)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClass', [$class]);

        return parent::setClass($class);
    }

    /**
     * {@inheritDoc}
     */
    public function getClass()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClass', []);

        return parent::getClass();
    }

    /**
     * {@inheritDoc}
     */
    public function setArgs($args)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArgs', [$args]);

        return parent::setArgs($args);
    }

    /**
     * {@inheritDoc}
     */
    public function getArgs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArgs', []);

        return parent::getArgs();
    }

    /**
     * {@inheritDoc}
     */
    public function setStep($step)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStep', [$step]);

        return parent::setStep($step);
    }

    /**
     * {@inheritDoc}
     */
    public function addStep($step = 1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addStep', [$step]);

        return parent::addStep($step);
    }

    /**
     * {@inheritDoc}
     */
    public function getStep()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStep', []);

        return parent::getStep();
    }

    /**
     * {@inheritDoc}
     */
    public function setTotalSteps($totalSteps)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTotalSteps', [$totalSteps]);

        return parent::setTotalSteps($totalSteps);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalSteps()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalSteps', []);

        return parent::getTotalSteps();
    }

    /**
     * {@inheritDoc}
     */
    public function setLog($log)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLog', [$log]);

        return parent::setLog($log);
    }

    /**
     * {@inheritDoc}
     */
    public function addLog($log)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLog', [$log]);

        return parent::addLog($log);
    }

    /**
     * {@inheritDoc}
     */
    public function getLog()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLog', []);

        return parent::getLog();
    }

    /**
     * {@inheritDoc}
     */
    public function setOwner(\Omeka\Entity\User $owner = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOwner', [$owner]);

        return parent::setOwner($owner);
    }

    /**
     * {@inheritDoc}
     */
    public function getOwner()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOwner', []);

        return parent::getOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setStarted(\DateTime $started)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStarted', [$started]);

        return parent::setStarted($started);
    }

    /**
     * {@inheritDoc}
     */
    public function getStarted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStarted', []);

        return parent::getStarted();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnded(\DateTime $ended)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnded', [$ended]);

        return parent::setEnded($ended);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnded()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnded', []);

        return parent::getEnded();
    }

    /**
     * {@inheritDoc}
     */
    public function prePersist(\Doctrine\ORM\Event\LifecycleEventArgs $eventArgs)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prePersist', [$eventArgs]);

        return parent::prePersist($eventArgs);
    }

    /**
     * {@inheritDoc}
     */
    public function getResourceId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResourceId', []);

        return parent::getResourceId();
    }

}
